SSH_CONFIG(5)                                                                                           BSD File Formats Manual                                                                                           SSH_CONFIG(5)

NNAAMMEE
     sssshh__ccoonnffiigg — OpenSSH SSH client configuration files

SSYYNNOOPPSSIISS
     ~~//..sssshh//ccoonnffiigg
     //eettcc//sssshh//sssshh__ccoonnffiigg

DDEESSCCRRIIPPTTIIOONN
     ssh(1) obtains configuration data from the following sources in the following order:

           1.   command-line options
           2.   user's configuration file (_~_/_._s_s_h_/_c_o_n_f_i_g)
           3.   system-wide configuration file (_/_e_t_c_/_s_s_h_/_s_s_h___c_o_n_f_i_g)

     For each parameter, the first obtained value will be used.  The configuration files contain sections separated by “Host” specifications, and that section is only applied for hosts that match one of the patterns given in the
     specification.  The matched host name is the one given on the command line.

     Since the first obtained value for each parameter is used, more host-specific declarations should be given near the beginning of the file, and general defaults at the end.

     Note that the Debian ooppeennsssshh--cclliieenntt package sets several options as standard in _/_e_t_c_/_s_s_h_/_s_s_h___c_o_n_f_i_g which are not the default in ssh(1):

           ··   SSeennddEEnnvv LANG LC_*
           ··   HHaasshhKKnnoowwnnHHoossttss yes
           ··   GGSSSSAAPPIIAAuutthheennttiiccaattiioonn yes

     The configuration file has the following format:

     Empty lines and lines starting with ‘#’ are comments.  Otherwise a line is of the format “keyword arguments”.  Configuration options may be separated by whitespace or optional whitespace and exactly one ‘=’; the latter format
     is useful to avoid the need to quote whitespace when specifying configuration options using the sssshh, ssccpp, and ssffttpp --oo option.  Arguments may optionally be enclosed in double quotes (") in order to represent arguments contain‐
     ing spaces.

     The possible keywords and their meanings are as follows (note that keywords are case-insensitive and arguments are case-sensitive):

     HHoosstt    Restricts the following declarations (up to the next HHoosstt or MMaattcchh keyword) to be only for those hosts that match one of the patterns given after the keyword.  If more than one pattern is provided, they should be sepa‐
             rated by whitespace.  A single ‘*’ as a pattern can be used to provide global defaults for all hosts.  The host is the _h_o_s_t_n_a_m_e argument given on the command line (i.e. the name is not converted to a canonicalized host
             name before matching).

             A pattern entry may be negated by prefixing it with an exclamation mark (‘!’).  If a negated entry is matched, then the HHoosstt entry is ignored, regardless of whether any other patterns on the line match.  Negated
             matches are therefore useful to provide exceptions for wildcard matches.

             See _P_A_T_T_E_R_N_S for more information on patterns.

     MMaattcchh   Restricts the following declarations (up to the next HHoosstt or MMaattcchh keyword) to be used only when the conditions following the MMaattcchh keyword are satisfied.  Match conditions are specified using one or more keyword/cri‐
             teria pairs or the single token aallll which matches all criteria.  The available keywords are: eexxeecc, hhoosstt, oorriiggiinnaallhhoosstt, uusseerr, and llooccaalluusseerr.

             The eexxeecc keyword executes the specified command under the user's shell.  If the command returns a zero exit status then the condition is considered true.  Commands containing whitespace characters must be quoted.  The
             following character sequences in the command will be expanded prior to execution: ‘%L’ will be substituted by the first component of the local host name, ‘%l’ will be substituted by the local host name (including any
             domain name), ‘%h’ will be substituted by the target host name, ‘%n’ will be substituted by the original target host name specified on the command-line, ‘%p’ the destination port, ‘%r’ by the remote login username, and
             ‘%u’ by the username of the user running ssh(1).

             The other keywords' criteria must be single entries or comma-separated lists and may use the wildcard and negation operators described in the _P_A_T_T_E_R_N_S section.  The criteria for the hhoosstt keyword are matched against the
             target hostname, after any substitution by the HHoossttnnaammee option.  The oorriiggiinnaallhhoosstt keyword matches against the hostname as it was specified on the command-line.  The uusseerr keyword matches against the target username on
             the remote host.  The llooccaalluusseerr keyword matches against the name of the local user running ssh(1) (this keyword may be useful in system-wide sssshh__ccoonnffiigg files).

     AAddddrreessssFFaammiillyy
             Specifies which address family to use when connecting.  Valid arguments are “any”, “inet” (use IPv4 only), or “inet6” (use IPv6 only).

     BBaattcchhMMooddee
             If set to “yes”, passphrase/password querying will be disabled.  In addition, the SSeerrvveerrAAlliivveeIInntteerrvvaall option will be set to 300 seconds by default.  This option is useful in scripts and other batch jobs where no user
             is present to supply the password, and where it is desirable to detect a broken network swiftly.  The argument must be “yes” or “no”.  The default is “no”.

     BBiinnddAAddddrreessss
             Use the specified address on the local machine as the source address of the connection.  Only useful on systems with more than one address.  Note that this option does not work if UUsseePPrriivviilleeggeeddPPoorrtt is set to “yes”.

     CCaannoonniiccaallDDoommaaiinnss
             When CCaannoonniiccaalliizzeeHHoossttnnaammee is enabled, this option specifies the list of domain suffixes in which to search for the specified destination host.

     CCaannoonniiccaalliizzeeFFaallllbbaacckkLLooccaall
             Specifies whether to fail with an error when hostname canonicalization fails.  The default, “yes”, will attempt to look up the unqualified hostname using the system resolver's search rules.  A value of “no” will cause
             ssh(1) to fail instantly if CCaannoonniiccaalliizzeeHHoossttnnaammee is enabled and the target hostname cannot be found in any of the domains specified by CCaannoonniiccaallDDoommaaiinnss.

     CCaannoonniiccaalliizzeeHHoossttnnaammee
             Controls whether explicit hostname canonicalization is performed.  The default, “no”, is not to perform any name rewriting and let the system resolver handle all hostname lookups.  If set to “yes” then, for connections
             that do not use a PPrrooxxyyCCoommmmaanndd, ssh(1) will attempt to canonicalize the hostname specified on the command line using the CCaannoonniiccaallDDoommaaiinnss suffixes and CCaannoonniiccaalliizzeePPeerrmmiitttteeddCCNNAAMMEEss rules.  If CCaannoonniiccaalliizzeeHHoossttnnaammee is set
             to “always”, then canonicalization is applied to proxied connections too.

             If this option is enabled and canonicalisation results in the target hostname changing, then the configuration files are processed again using the new target name to pick up any new configuration in matching HHoosstt stan‐
             zas.

     CCaannoonniiccaalliizzeeMMaaxxDDoottss
             Specifies the maximum number of dot characters in a hostname before canonicalization is disabled.  The default, “1”, allows a single dot (i.e. hostname.subdomain).

     CCaannoonniiccaalliizzeePPeerrmmiitttteeddCCNNAAMMEEss
             Specifies rules to determine whether CNAMEs should be followed when canonicalizing hostnames.  The rules consist of one or more arguments of _s_o_u_r_c_e___d_o_m_a_i_n___l_i_s_t:_t_a_r_g_e_t___d_o_m_a_i_n___l_i_s_t, where _s_o_u_r_c_e___d_o_m_a_i_n___l_i_s_t is a pattern-
             list of domains that may follow CNAMEs in canonicalization, and _t_a_r_g_e_t___d_o_m_a_i_n___l_i_s_t is a pattern-list of domains that they may resolve to.

             For example, “*.a.example.com:*.b.example.com,*.c.example.com” will allow hostnames matching “*.a.example.com” to be canonicalized to names in the “*.b.example.com” or “*.c.example.com” domains.

     CChhaalllleennggeeRReessppoonnsseeAAuutthheennttiiccaattiioonn
             Specifies whether to use challenge-response authentication.  The argument to this keyword must be “yes” or “no”.  The default is “yes”.

     CChheecckkHHoossttIIPP
             If this flag is set to “yes”, ssh(1) will additionally check the host IP address in the _k_n_o_w_n___h_o_s_t_s file.  This allows ssh to detect if a host key changed due to DNS spoofing.  If the option is set to “no”, the check
             will not be executed.  The default is “yes”.

     CCiipphheerr  Specifies the cipher to use for encrypting the session in protocol version 1.  Currently, “blowfish”, “3des”, and “des” are supported.  _d_e_s is only supported in the ssh(1) client for interoperability with legacy proto‐
             col 1 implementations that do not support the _3_d_e_s cipher.  Its use is strongly discouraged due to cryptographic weaknesses.  The default is “3des”.

     CCiipphheerrss
             Specifies the ciphers allowed for protocol version 2 in order of preference.  Multiple ciphers must be comma-separated.  The supported ciphers are:

             “3des-cbc”, “aes128-cbc”, “aes192-cbc”, “aes256-cbc”, “aes128-ctr”, “aes192-ctr”, “aes256-ctr”, “aes128-gcm@openssh.com”, “aes256-gcm@openssh.com”, “arcfour128”, “arcfour256”, “arcfour”, “blowfish-cbc”, “cast128-cbc”,
             and “chacha20-poly1305@openssh.com”.

             The default is:

                aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,
                aes128-gcm@openssh.com,aes256-gcm@openssh.com,
                chacha20-poly1305@openssh.com,
                aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,
                aes256-cbc,arcfour

             The list of available ciphers may also be obtained using the --QQ option of ssh(1).

     CClleeaarrAAllllFFoorrwwaarrddiinnggss
             Specifies that all local, remote, and dynamic port forwardings specified in the configuration files or on the command line be cleared.  This option is primarily useful when used from the ssh(1) command line to clear
             port forwardings set in configuration files, and is automatically set by scp(1) and sftp(1).  The argument must be “yes” or “no”.  The default is “no”.

     CCoommpprreessssiioonn
             Specifies whether to use compression.  The argument must be “yes” or “no”.  The default is “no”.

     CCoommpprreessssiioonnLLeevveell
             Specifies the compression level to use if compression is enabled.  The argument must be an integer from 1 (fast) to 9 (slow, best).  The default level is 6, which is good for most applications.  The meaning of the val‐
             ues is the same as in gzip(1).  Note that this option applies to protocol version 1 only.

     CCoonnnneeccttiioonnAAtttteemmppttss
             Specifies the number of tries (one per second) to make before exiting.  The argument must be an integer.  This may be useful in scripts if the connection sometimes fails.  The default is 1.

     CCoonnnneeccttTTiimmeeoouutt
             Specifies the timeout (in seconds) used when connecting to the SSH server, instead of using the default system TCP timeout.  This value is used only when the target is down or really unreachable, not when it refuses
             the connection.

     CCoonnttrroollMMaasstteerr
             Enables the sharing of multiple sessions over a single network connection.  When set to “yes”, ssh(1) will listen for connections on a control socket specified using the CCoonnttrroollPPaatthh argument.  Additional sessions can
             connect to this socket using the same CCoonnttrroollPPaatthh with CCoonnttrroollMMaasstteerr set to “no” (the default).  These sessions will try to reuse the master instance's network connection rather than initiating new ones, but will fall
             back to connecting normally if the control socket does not exist, or is not listening.

             Setting this to “ask” will cause ssh to listen for control connections, but require confirmation using the SSH_ASKPASS program before they are accepted (see ssh-add(1) for details).  If the CCoonnttrroollPPaatthh cannot be
             opened, ssh will continue without connecting to a master instance.

             X11 and ssh-agent(1) forwarding is supported over these multiplexed connections, however the display and agent forwarded will be the one belonging to the master connection i.e. it is not possible to forward multiple
             displays or agents.

             Two additional options allow for opportunistic multiplexing: try to use a master connection but fall back to creating a new one if one does not already exist.  These options are: “auto” and “autoask”.  The latter
             requires confirmation like the “ask” option.

     CCoonnttrroollPPaatthh
             Specify the path to the control socket used for connection sharing as described in the CCoonnttrroollMMaasstteerr section above or the string “none” to disable connection sharing.  In the path, ‘%L’ will be substituted by the first
             component of the local host name, ‘%l’ will be substituted by the local host name (including any domain name), ‘%h’ will be substituted by the target host name, ‘%n’ will be substituted by the original target host name
             specified on the command line, ‘%p’ the destination port, ‘%r’ by the remote login username, and ‘%u’ by the username of the user running ssh(1).  It is recommended that any CCoonnttrroollPPaatthh used for opportunistic connec‐
             tion sharing include at least %h, %p, and %r.  This ensures that shared connections are uniquely identified.

     CCoonnttrroollPPeerrssiisstt
             When used in conjunction with CCoonnttrroollMMaasstteerr, specifies that the master connection should remain open in the background (waiting for future client connections) after the initial client connection has been closed.  If
             set to “no”, then the master connection will not be placed into the background, and will close as soon as the initial client connection is closed.  If set to “yes”, then the master connection will remain in the back‐
             ground indefinitely (until killed or closed via a mechanism such as the ssh(1) “--OO exit” option).  If set to a time in seconds, or a time in any of the formats documented in sshd_config(5), then the backgrounded master
             connection will automatically terminate after it has remained idle (with no client connections) for the specified time.

     DDyynnaammiiccFFoorrwwaarrdd
             Specifies that a TCP port on the local machine be forwarded over the secure channel, and the application protocol is then used to determine where to connect to from the remote machine.

             The argument must be [_b_i_n_d___a_d_d_r_e_s_s:]_p_o_r_t.  IPv6 addresses can be specified by enclosing addresses in square brackets.  By default, the local port is bound in accordance with the GGaatteewwaayyPPoorrttss setting.  However, an
             explicit _b_i_n_d___a_d_d_r_e_s_s may be used to bind the connection to a specific address.  The _b_i_n_d___a_d_d_r_e_s_s of “localhost” indicates that the listening port be bound for local use only, while an empty address or ‘*’ indicates
             that the port should be available from all interfaces.

             Currently the SOCKS4 and SOCKS5 protocols are supported, and ssh(1) will act as a SOCKS server.  Multiple forwardings may be specified, and additional forwardings can be given on the command line.  Only the superuser
             can forward privileged ports.

     EEnnaabblleeSSSSHHKKeeyyssiiggnn
             Setting this option to “yes” in the global client configuration file _/_e_t_c_/_s_s_h_/_s_s_h___c_o_n_f_i_g enables the use of the helper program ssh-keysign(8) during HHoossttbbaasseeddAAuutthheennttiiccaattiioonn.  The argument must be “yes” or “no”.  The
             default is “no”.  This option should be placed in the non-hostspecific section.  See ssh-keysign(8) for more information.

     EEssccaappeeCChhaarr
             Sets the escape character (default: ‘~’).  The escape character can also be set on the command line.  The argument should be a single character, ‘^’ followed by a letter, or “none” to disable the escape character
             entirely (making the connection transparent for binary data).

     EExxiittOOnnFFoorrwwaarrddFFaaiilluurree
             Specifies whether ssh(1) should terminate the connection if it cannot set up all requested dynamic, tunnel, local, and remote port forwardings.  The argument must be “yes” or “no”.  The default is “no”.

     FFoorrwwaarrddAAggeenntt
             Specifies whether the connection to the authentication agent (if any) will be forwarded to the remote machine.  The argument must be “yes” or “no”.  The default is “no”.

             Agent forwarding should be enabled with caution.  Users with the ability to bypass file permissions on the remote host (for the agent's Unix-domain socket) can access the local agent through the forwarded connection.
             An attacker cannot obtain key material from the agent, however they can perform operations on the keys that enable them to authenticate using the identities loaded into the agent.

     FFoorrwwaarrddXX1111
             Specifies whether X11 connections will be automatically redirected over the secure channel and DISPLAY set.  The argument must be “yes” or “no”.  The default is “no”.

             X11 forwarding should be enabled with caution.  Users with the ability to bypass file permissions on the remote host (for the user's X11 authorization database) can access the local X11 display through the forwarded
             connection.  An attacker may then be able to perform activities such as keystroke monitoring if the FFoorrwwaarrddXX1111TTrruusstteedd option is also enabled.

     FFoorrwwaarrddXX1111TTiimmeeoouutt
             Specify a timeout for untrusted X11 forwarding using the format described in the TIME FORMATS section of sshd_config(5).  X11 connections received by ssh(1) after this time will be refused.  The default is to disable
             untrusted X11 forwarding after twenty minutes has elapsed.

     FFoorrwwaarrddXX1111TTrruusstteedd
             If this option is set to “yes”, remote X11 clients will have full access to the original X11 display.

             If this option is set to “no”, remote X11 clients will be considered untrusted and prevented from stealing or tampering with data belonging to trusted X11 clients.  Furthermore, the xauth(1) token used for the session
             will be set to expire after 20 minutes.  Remote clients will be refused access after this time.

             The default is “yes” (Debian-specific).

             See the X11 SECURITY extension specification for full details on the restrictions imposed on untrusted clients.

     GGaatteewwaayyPPoorrttss
             Specifies whether remote hosts are allowed to connect to local forwarded ports.  By default, ssh(1) binds local port forwardings to the loopback address.  This prevents other remote hosts from connecting to forwarded
             ports.  GGaatteewwaayyPPoorrttss can be used to specify that ssh should bind local port forwardings to the wildcard address, thus allowing remote hosts to connect to forwarded ports.  The argument must be “yes” or “no”.  The
             default is “no”.

     GGlloobbaallKKnnoowwnnHHoossttssFFiillee
             Specifies one or more files to use for the global host key database, separated by whitespace.  The default is _/_e_t_c_/_s_s_h_/_s_s_h___k_n_o_w_n___h_o_s_t_s, _/_e_t_c_/_s_s_h_/_s_s_h___k_n_o_w_n___h_o_s_t_s_2.

     GGSSSSAAPPIIAAuutthheennttiiccaattiioonn
             Specifies whether user authentication based on GSSAPI is allowed.  The default is “no”.  Note that this option applies to protocol version 2 only.

     GGSSSSAAPPIIKKeeyyEExxcchhaannggee
             Specifies whether key exchange based on GSSAPI may be used. When using GSSAPI key exchange the server need not have a host key.  The default is “no”.  Note that this option applies to protocol version 2 only.

     GGSSSSAAPPIICClliieennttIIddeennttiittyy
             If set, specifies the GSSAPI client identity that ssh should use when connecting to the server. The default is unset, which means that the default identity will be used.

     GGSSSSAAPPIISSeerrvveerrIIddeennttiittyy
             If set, specifies the GSSAPI server identity that ssh should expect when connecting to the server. The default is unset, which means that the expected GSSAPI server identity will be determined from the target hostname.

     GGSSSSAAPPIIDDeelleeggaatteeCCrreeddeennttiiaallss
             Forward (delegate) credentials to the server.  The default is “no”.  Note that this option applies to protocol version 2 connections using GSSAPI.

     GGSSSSAAPPIIRReenneewwaallFFoorrcceessRReekkeeyy
             If set to “yes” then renewal of the client's GSSAPI credentials will force the rekeying of the ssh connection. With a compatible server, this can delegate the renewed credentials to a session on the server.  The
             default is “no”.

     GGSSSSAAPPIITTrruussttDDnnss
             Set to “yes to indicate that the DNS is trusted to securely canonicalize” the name of the host being connected to. If “no, the hostname entered on the” command line will be passed untouched to the GSSAPI library.  The
             default is “no”.  This option only applies to protocol version 2 connections using GSSAPI.

     HHaasshhKKnnoowwnnHHoossttss
             Indicates that ssh(1) should hash host names and addresses when they are added to _~_/_._s_s_h_/_k_n_o_w_n___h_o_s_t_s.  These hashed names may be used normally by ssh(1) and sshd(8), but they do not reveal identifying information
             should the file's contents be disclosed.  The default is “no”.  Note that existing names and addresses in known hosts files will not be converted automatically, but may be manually hashed using ssh-keygen(1).  Use of
             this option may break facilities such as tab-completion that rely on being able to read unhashed host names from _~_/_._s_s_h_/_k_n_o_w_n___h_o_s_t_s.

     HHoossttbbaasseeddAAuutthheennttiiccaattiioonn
             Specifies whether to try rhosts based authentication with public key authentication.  The argument must be “yes” or “no”.  The default is “no”.  This option applies to protocol version 2 only and is similar to
             RRhhoossttssRRSSAAAAuutthheennttiiccaattiioonn.

     HHoossttKKeeyyAAllggoorriitthhmmss
             Specifies the protocol version 2 host key algorithms that the client wants to use in order of preference.  The default for this option is:

                ecdsa-sha2-nistp256-cert-v01@openssh.com,
                ecdsa-sha2-nistp384-cert-v01@openssh.com,
                ecdsa-sha2-nistp521-cert-v01@openssh.com,
                ssh-ed25519-cert-v01@openssh.com,
                ssh-rsa-cert-v01@openssh.com,ssh-dss-cert-v01@openssh.com,
                ssh-rsa-cert-v00@openssh.com,ssh-dss-cert-v00@openssh.com,
                ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,
                ssh-ed25519,ssh-rsa,ssh-dss

             If hostkeys are known for the destination host then this default is modified to prefer their algorithms.

     HHoossttKKeeyyAAlliiaass
             Specifies an alias that should be used instead of the real host name when looking up or saving the host key in the host key database files.  This option is useful for tunneling SSH connections or for multiple servers
             running on a single host.

     HHoossttNNaammee
             Specifies the real host name to log into.  This can be used to specify nicknames or abbreviations for hosts.  If the hostname contains the character sequence ‘%h’, then this will be replaced with the host name speci‐
             fied on the command line (this is useful for manipulating unqualified names).  The default is the name given on the command line.  Numeric IP addresses are also permitted (both on the command line and in HHoossttNNaammee spec‐
             ifications).

     IIddeennttiittiieessOOnnllyy
             Specifies that ssh(1) should only use the authentication identity files configured in the sssshh__ccoonnffiigg files, even if ssh-agent(1) or a PPKKCCSS1111PPrroovviiddeerr offers more identities.  The argument to this keyword must be “yes”
             or “no”.  This option is intended for situations where ssh-agent offers many different identities.  The default is “no”.

     IIddeennttiittyyFFiillee
             Specifies a file from which the user's DSA, ECDSA, ED25519 or RSA authentication identity is read.  The default is _~_/_._s_s_h_/_i_d_e_n_t_i_t_y for protocol version 1, and _~_/_._s_s_h_/_i_d___d_s_a, _~_/_._s_s_h_/_i_d___e_c_d_s_a, _~_/_._s_s_h_/_i_d___e_d_2_5_5_1_9 and
             _~_/_._s_s_h_/_i_d___r_s_a for protocol version 2.  Additionally, any identities represented by the authentication agent will be used for authentication unless IIddeennttiittiieessOOnnllyy is set.  ssh(1) will try to load certificate information
             from the filename obtained by appending _-_c_e_r_t_._p_u_b to the path of a specified IIddeennttiittyyFFiillee.

             The file name may use the tilde syntax to refer to a user's home directory or one of the following escape characters: ‘%d’ (local user's home directory), ‘%u’ (local user name), ‘%l’ (local host name), ‘%h’ (remote
             host name) or ‘%r’ (remote user name).

             It is possible to have multiple identity files specified in configuration files; all these identities will be tried in sequence.  Multiple IIddeennttiittyyFFiillee directives will add to the list of identities tried (this behav‐
             iour differs from that of other configuration directives).

             IIddeennttiittyyFFiillee may be used in conjunction with IIddeennttiittiieessOOnnllyy to select which identities in an agent are offered during authentication.

     IIggnnoorreeUUnnkknnoowwnn
             Specifies a pattern-list of unknown options to be ignored if they are encountered in configuration parsing.  This may be used to suppress errors if sssshh__ccoonnffiigg contains options that are unrecognised by ssh(1).  It is
             recommended that IIggnnoorreeUUnnkknnoowwnn be listed early in the configuration file as it will not be applied to unknown options that appear before it.

     IIPPQQooSS   Specifies the IPv4 type-of-service or DSCP class for connections.  Accepted values are “af11”, “af12”, “af13”, “af21”, “af22”, “af23”, “af31”, “af32”, “af33”, “af41”, “af42”, “af43”, “cs0”, “cs1”, “cs2”, “cs3”, “cs4”,
             “cs5”, “cs6”, “cs7”, “ef”, “lowdelay”, “throughput”, “reliability”, or a numeric value.  This option may take one or two arguments, separated by whitespace.  If one argument is specified, it is used as the packet class
             unconditionally.  If two values are specified, the first is automatically selected for interactive sessions and the second for non-interactive sessions.  The default is “lowdelay” for interactive sessions and
             “throughput” for non-interactive sessions.

     KKbbddIInntteerraaccttiivveeAAuutthheennttiiccaattiioonn
             Specifies whether to use keyboard-interactive authentication.  The argument to this keyword must be “yes” or “no”.  The default is “yes”.

     KKbbddIInntteerraaccttiivveeDDeevviicceess
             Specifies the list of methods to use in keyboard-interactive authentication.  Multiple method names must be comma-separated.  The default is to use the server specified list.  The methods available vary depending on
             what the server supports.  For an OpenSSH server, it may be zero or more of: “bsdauth”, “pam”, and “skey”.

     KKeexxAAllggoorriitthhmmss
             Specifies the available KEX (Key Exchange) algorithms.  Multiple algorithms must be comma-separated.  The default is:

                   curve25519-sha256@libssh.org,
                   ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,
                   diffie-hellman-group-exchange-sha256,
                   diffie-hellman-group-exchange-sha1,
                   diffie-hellman-group14-sha1,
                   diffie-hellman-group1-sha1

     LLooccaallCCoommmmaanndd
             Specifies a command to execute on the local machine after successfully connecting to the server.  The command string extends to the end of the line, and is executed with the user's shell.  The following escape charac‐
             ter substitutions will be performed: ‘%d’ (local user's home directory), ‘%h’ (remote host name), ‘%l’ (local host name), ‘%n’ (host name as provided on the command line), ‘%p’ (remote port), ‘%r’ (remote user name) or
             ‘%u’ (local user name).

             The command is run synchronously and does not have access to the session of the ssh(1) that spawned it.  It should not be used for interactive commands.

             This directive is ignored unless PPeerrmmiittLLooccaallCCoommmmaanndd has been enabled.

     LLooccaallFFoorrwwaarrdd
             Specifies that a TCP port on the local machine be forwarded over the secure channel to the specified host and port from the remote machine.  The first argument must be [_b_i_n_d___a_d_d_r_e_s_s:]_p_o_r_t and the second argument must
             be _h_o_s_t:_h_o_s_t_p_o_r_t.  IPv6 addresses can be specified by enclosing addresses in square brackets.  Multiple forwardings may be specified, and additional forwardings can be given on the command line.  Only the superuser can
             forward privileged ports.  By default, the local port is bound in accordance with the GGaatteewwaayyPPoorrttss setting.  However, an explicit _b_i_n_d___a_d_d_r_e_s_s may be used to bind the connection to a specific address.  The _b_i_n_d___a_d_d_r_e_s_s
             of “localhost” indicates that the listening port be bound for local use only, while an empty address or ‘*’ indicates that the port should be available from all interfaces.

     LLooggLLeevveell
             Gives the verbosity level that is used when logging messages from ssh(1).  The possible values are: QUIET, FATAL, ERROR, INFO, VERBOSE, DEBUG, DEBUG1, DEBUG2, and DEBUG3.  The default is INFO.  DEBUG and DEBUG1 are
             equivalent.  DEBUG2 and DEBUG3 each specify higher levels of verbose output.

     MMAACCss    Specifies the MAC (message authentication code) algorithms in order of preference.  The MAC algorithm is used in protocol version 2 for data integrity protection.  Multiple algorithms must be comma-separated.  The
             algorithms that contain “-etm” calculate the MAC after encryption (encrypt-then-mac).  These are considered safer and their use recommended.  The default is:

                   hmac-md5-etm@openssh.com,hmac-sha1-etm@openssh.com,
                   umac-64-etm@openssh.com,umac-128-etm@openssh.com,
                   hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,
                   hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,
                   hmac-md5-96-etm@openssh.com,
                   hmac-md5,hmac-sha1,umac-64@openssh.com,umac-128@openssh.com,
                   hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,
                   hmac-sha1-96,hmac-md5-96

     NNooHHoossttAAuutthheennttiiccaattiioonnFFoorrLLooccaallhhoosstt
             This option can be used if the home directory is shared across machines.  In this case localhost will refer to a different machine on each of the machines and the user will get many warnings about changed host keys.
             However, this option disables host authentication for localhost.  The argument to this keyword must be “yes” or “no”.  The default is to check the host key for localhost.

     NNuummbbeerrOOffPPaasssswwoorrddPPrroommppttss
             Specifies the number of password prompts before giving up.  The argument to this keyword must be an integer.  The default is 3.

     PPaasssswwoorrddAAuutthheennttiiccaattiioonn
             Specifies whether to use password authentication.  The argument to this keyword must be “yes” or “no”.  The default is “yes”.

     PPeerrmmiittLLooccaallCCoommmmaanndd
             Allow local command execution via the LLooccaallCCoommmmaanndd option or using the !!_c_o_m_m_a_n_d escape sequence in ssh(1).  The argument must be “yes” or “no”.  The default is “no”.

     PPKKCCSS1111PPrroovviiddeerr
             Specifies which PKCS#11 provider to use.  The argument to this keyword is the PKCS#11 shared library ssh(1) should use to communicate with a PKCS#11 token providing the user's private RSA key.

     PPoorrtt    Specifies the port number to connect on the remote host.  The default is 22.

     PPrreeffeerrrreeddAAuutthheennttiiccaattiioonnss
             Specifies the order in which the client should try protocol 2 authentication methods.  This allows a client to prefer one method (e.g. kkeeyybbooaarrdd--iinntteerraaccttiivvee) over another method (e.g. ppaasssswwoorrdd).  The default is:

                   gssapi-with-mic,hostbased,publickey,
                   keyboard-interactive,password

     PPrroottooccooll
             Specifies the protocol versions ssh(1) should support in order of preference.  The possible values are ‘1’ and ‘2’.  Multiple versions must be comma-separated.  When this option is set to “2,1” sssshh will try version 2
             and fall back to version 1 if version 2 is not available.  The default is ‘2’.

     PPrrooxxyyCCoommmmaanndd
             Specifies the command to use to connect to the server.  The command string extends to the end of the line, and is executed with the user's shell.  In the command string, any occurrence of ‘%h’ will be substituted by
             the host name to connect, ‘%p’ by the port, and ‘%r’ by the remote user name.  The command can be basically anything, and should read from its standard input and write to its standard output.  It should eventually con‐
             nect an sshd(8) server running on some machine, or execute sssshhdd --ii somewhere.  Host key management will be done using the HostName of the host being connected (defaulting to the name typed by the user).  Setting the
             command to “none” disables this option entirely.  Note that CChheecckkHHoossttIIPP is not available for connects with a proxy command.

             This directive is useful in conjunction with nc(1) and its proxy support.  For example, the following directive would connect via an HTTP proxy at 192.0.2.0:

                ProxyCommand /usr/bin/nc -X connect -x 192.0.2.0:8080 %h %p

     PPrrooxxyyUUsseeFFddppaassss
             Specifies that PPrrooxxyyCCoommmmaanndd will pass a connected file descriptor back to ssh(1) instead of continuing to execute and pass data.  The default is “no”.

     PPuubbkkeeyyAAuutthheennttiiccaattiioonn
             Specifies whether to try public key authentication.  The argument to this keyword must be “yes” or “no”.  The default is “yes”.  This option applies to protocol version 2 only.

     RReekkeeyyLLiimmiitt
             Specifies the maximum amount of data that may be transmitted before the session key is renegotiated, optionally followed a maximum amount of time that may pass before the session key is renegotiated.  The first argu‐
             ment is specified in bytes and may have a suffix of ‘K’, ‘M’, or ‘G’ to indicate Kilobytes, Megabytes, or Gigabytes, respectively.  The default is between ‘1G’ and ‘4G’, depending on the cipher.  The optional second
             value is specified in seconds and may use any of the units documented in the TIME FORMATS section of sshd_config(5).  The default value for RReekkeeyyLLiimmiitt is “default none”, which means that rekeying is performed after the
             cipher's default amount of data has been sent or received and no time based rekeying is done.  This option applies to protocol version 2 only.

     RReemmootteeFFoorrwwaarrdd
             Specifies that a TCP port on the remote machine be forwarded over the secure channel to the specified host and port from the local machine.  The first argument must be [_b_i_n_d___a_d_d_r_e_s_s:]_p_o_r_t and the second argument must
             be _h_o_s_t:_h_o_s_t_p_o_r_t.  IPv6 addresses can be specified by enclosing addresses in square brackets.  Multiple forwardings may be specified, and additional forwardings can be given on the command line.  Privileged ports can
             be forwarded only when logging in as root on the remote machine.

             If the _p_o_r_t argument is ‘0’, the listen port will be dynamically allocated on the server and reported to the client at run time.

             If the _b_i_n_d___a_d_d_r_e_s_s is not specified, the default is to only bind to loopback addresses.  If the _b_i_n_d___a_d_d_r_e_s_s is ‘*’ or an empty string, then the forwarding is requested to listen on all interfaces.  Specifying a
             remote _b_i_n_d___a_d_d_r_e_s_s will only succeed if the server's GGaatteewwaayyPPoorrttss option is enabled (see sshd_config(5)).

     RReeqquueessttTTTTYY
             Specifies whether to request a pseudo-tty for the session.  The argument may be one of: “no” (never request a TTY), “yes” (always request a TTY when standard input is a TTY), “force” (always request a TTY) or “auto”
             (request a TTY when opening a login session).  This option mirrors the --tt and --TT flags for ssh(1).

     RRhhoossttssRRSSAAAAuutthheennttiiccaattiioonn
             Specifies whether to try rhosts based authentication with RSA host authentication.  The argument must be “yes” or “no”.  The default is “no”.  This option applies to protocol version 1 only and requires ssh(1) to be
             setuid root.

     RRSSAAAAuutthheennttiiccaattiioonn
             Specifies whether to try RSA authentication.  The argument to this keyword must be “yes” or “no”.  RSA authentication will only be attempted if the identity file exists, or an authentication agent is running.  The
             default is “yes”.  Note that this option applies to protocol version 1 only.

     SSeennddEEnnvv
             Specifies what variables from the local environ(7) should be sent to the server.  Note that environment passing is only supported for protocol 2.  The server must also support it, and the server must be configured to
             accept these environment variables.  Refer to AAcccceeppttEEnnvv in sshd_config(5) for how to configure the server.  Variables are specified by name, which may contain wildcard characters.  Multiple environment variables may be
             separated by whitespace or spread across multiple SSeennddEEnnvv directives.  The default is not to send any environment variables.

             See _P_A_T_T_E_R_N_S for more information on patterns.

     SSeerrvveerrAAlliivveeCCoouunnttMMaaxx
             Sets the number of server alive messages (see below) which may be sent without ssh(1) receiving any messages back from the server.  If this threshold is reached while server alive messages are being sent, ssh will dis‐
             connect from the server, terminating the session.  It is important to note that the use of server alive messages is very different from TTCCPPKKeeeeppAAlliivvee (below).  The server alive messages are sent through the encrypted
             channel and therefore will not be spoofable.  The TCP keepalive option enabled by TTCCPPKKeeeeppAAlliivvee is spoofable.  The server alive mechanism is valuable when the client or server depend on knowing when a connection has
             become inactive.

             The default value is 3.  If, for example, SSeerrvveerrAAlliivveeIInntteerrvvaall (see below) is set to 15 and SSeerrvveerrAAlliivveeCCoouunnttMMaaxx is left at the default, if the server becomes unresponsive, ssh will disconnect after approximately 45 sec‐
             onds.  This option applies to protocol version 2 only; in protocol version 1 there is no mechanism to request a response from the server to the server alive messages, so disconnection is the responsibility of the TCP
             stack.

     SSeerrvveerrAAlliivveeIInntteerrvvaall
             Sets a timeout interval in seconds after which if no data has been received from the server, ssh(1) will send a message through the encrypted channel to request a response from the server.  The default is 0, indicating
             that these messages will not be sent to the server, or 300 if the BBaattcchhMMooddee option is set.  This option applies to protocol version 2 only.  PPrroottooccoollKKeeeeppAAlliivveess and SSeettuuppTTiimmeeOOuutt are Debian-specific compatibility aliases
             for this option.

     SSttrriiccttHHoossttKKeeyyCChheecckkiinngg
             If this flag is set to “yes”, ssh(1) will never automatically add host keys to the _~_/_._s_s_h_/_k_n_o_w_n___h_o_s_t_s file, and refuses to connect to hosts whose host key has changed.  This provides maximum protection against trojan
             horse attacks, though it can be annoying when the _/_e_t_c_/_s_s_h_/_s_s_h___k_n_o_w_n___h_o_s_t_s file is poorly maintained or when connections to new hosts are frequently made.  This option forces the user to manually add all new hosts.  If
             this flag is set to “no”, ssh will automatically add new host keys to the user known hosts files.  If this flag is set to “ask”, new host keys will be added to the user known host files only after the user has con‐
             firmed that is what they really want to do, and ssh will refuse to connect to hosts whose host key has changed.  The host keys of known hosts will be verified automatically in all cases.  The argument must be “yes”,
             “no”, or “ask”.  The default is “ask”.

     TTCCPPKKeeeeppAAlliivvee
             Specifies whether the system should send TCP keepalive messages to the other side.  If they are sent, death of the connection or crash of one of the machines will be properly noticed.  This option only uses TCP
             keepalives (as opposed to using ssh level keepalives), so takes a long time to notice when the connection dies.  As such, you probably want the SSeerrvveerrAAlliivveeIInntteerrvvaall option as well.  However, this means that connections
             will die if the route is down temporarily, and some people find it annoying.

             The default is “yes” (to send TCP keepalive messages), and the client will notice if the network goes down or the remote host dies.  This is important in scripts, and many users want it too.

             To disable TCP keepalive messages, the value should be set to “no”.

     TTuunnnneell  Request tun(4) device forwarding between the client and the server.  The argument must be “yes”, “point-to-point” (layer 3), “ethernet” (layer 2), or “no”.  Specifying “yes” requests the default tunnel mode, which is
             “point-to-point”.  The default is “no”.

     TTuunnnneellDDeevviiccee
             Specifies the tun(4) devices to open on the client (_l_o_c_a_l___t_u_n) and the server (_r_e_m_o_t_e___t_u_n).

             The argument must be _l_o_c_a_l___t_u_n[:_r_e_m_o_t_e___t_u_n].  The devices may be specified by numerical ID or the keyword “any”, which uses the next available tunnel device.  If _r_e_m_o_t_e___t_u_n is not specified, it defaults to “any”.  The
             default is “any:any”.

     UUsseePPrriivviilleeggeeddPPoorrtt
             Specifies whether to use a privileged port for outgoing connections.  The argument must be “yes” or “no”.  The default is “no”.  If set to “yes”, ssh(1) must be setuid root.  Note that this option must be set to “yes”
             for RRhhoossttssRRSSAAAAuutthheennttiiccaattiioonn with older servers.

     UUsseerr    Specifies the user to log in as.  This can be useful when a different user name is used on different machines.  This saves the trouble of having to remember to give the user name on the command line.

     UUsseerrKKnnoowwnnHHoossttssFFiillee
             Specifies one or more files to use for the user host key database, separated by whitespace.  The default is _~_/_._s_s_h_/_k_n_o_w_n___h_o_s_t_s, _~_/_._s_s_h_/_k_n_o_w_n___h_o_s_t_s_2.

     VVeerriiffyyHHoossttKKeeyyDDNNSS
             Specifies whether to verify the remote key using DNS and SSHFP resource records.  If this option is set to “yes”, the client will implicitly trust keys that match a secure fingerprint from DNS.  Insecure fingerprints
             will be handled as if this option was set to “ask”.  If this option is set to “ask”, information on fingerprint match will be displayed, but the user will still need to confirm new host keys according to the
             SSttrriiccttHHoossttKKeeyyCChheecckkiinngg option.  The argument must be “yes”, “no”, or “ask”.  The default is “no”.  Note that this option applies to protocol version 2 only.

             See also VERIFYING HOST KEYS in ssh(1).

     VViissuuaallHHoossttKKeeyy
             If this flag is set to “yes”, an ASCII art representation of the remote host key fingerprint is printed in addition to the hex fingerprint string at login and for unknown host keys.  If this flag is set to “no”, no
             fingerprint strings are printed at login and only the hex fingerprint string will be printed for unknown host keys.  The default is “no”.

     XXAAuutthhLLooccaattiioonn
             Specifies the full pathname of the xauth(1) program.  The default is _/_u_s_r_/_b_i_n_/_x_a_u_t_h.

PPAATTTTEERRNNSS
     A _p_a_t_t_e_r_n consists of zero or more non-whitespace characters, ‘*’ (a wildcard that matches zero or more characters), or ‘?’ (a wildcard that matches exactly one character).  For example, to specify a set of declarations for
     any host in the “.co.uk” set of domains, the following pattern could be used:

           Host *.co.uk

     The following pattern would match any host in the 192.168.0.[0-9] network range:

           Host 192.168.0.?

     A _p_a_t_t_e_r_n_-_l_i_s_t is a comma-separated list of patterns.  Patterns within pattern-lists may be negated by preceding them with an exclamation mark (‘!’).  For example, to allow a key to be used from anywhere within an organization
     except from the “dialup” pool, the following entry (in authorized_keys) could be used:

           from="!*.dialup.example.com,*.example.com"

FFIILLEESS
     ~/.ssh/config
             This is the per-user configuration file.  The format of this file is described above.  This file is used by the SSH client.  Because of the potential for abuse, this file must have strict permissions: read/write for
             the user, and not accessible by others.  It may be group-writable provided that the group in question contains only the user.

     /etc/ssh/ssh_config
             Systemwide configuration file.  This file provides defaults for those values that are not specified in the user's configuration file, and for those users who do not have a configuration file.  This file must be world-
             readable.

SSEEEE AALLSSOO
     ssh(1)

AAUUTTHHOORRSS
     OpenSSH is a derivative of the original and free ssh 1.2.12 release by Tatu Ylonen.  Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos, Theo de Raadt and Dug Song removed many bugs, re-added newer features and created
     OpenSSH.  Markus Friedl contributed the support for SSH protocol versions 1.5 and 2.0.

BSD                                                                                                          March 24, 2020                                                                                                         BSD
